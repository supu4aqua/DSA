class HashMap {
    constructor(initialCapacity=8) {
        this.length = 0;
        this._hashTable = [];
        this._capacity = initialCapacity;
        this._deleted = 0;
    }
    get(key) {
        const index = this._findSlot(key);
        if (this._hashTable[index] === undefined) {
            throw new Error('Key error');
        }
        return this._hashTable[index].value;
    }
    set(key, value){
        const loadRatio = (this.length + this._deleted + 1) / this._capacity;
        if (loadRatio > HashMap.MAX_LOAD_RATIO) {
            this._resize(this._capacity * HashMap.SIZE_RATIO);
        }
        //Find the slot where this key should be in
        const index = this._findSlot(key);
        if(!this._hashTable[index]){
            this.length++;
        }
        this._hashTable[index] = {
            key,
            value,
            DELETED: false
        };
    }
    delete(key) {
        const index = this._findSlot(key);
        const slot = this._hashTable[index];
        if (slot === undefined) {
            throw new Error('Key error');
        }
        slot.DELETED = true;
        this.length--;
        this._deleted++;
    }
    _findSlot(key) {
        const hash = HashMap._hashString(key);
        const start = hash % this._capacity;
        for (let i=start; i<start + this._capacity; i++) {
            const index = i % this._capacity;
            const slot = this._hashTable[index];
            if (slot === undefined || (slot.key === key && !slot.DELETED)) {
                return index;
            }
        }
    }
    _resize(size) {
        const oldSlots = this._hashTable;
        this._capacity = size;
        // Reset the length - it will get rebuilt as you add the items back
        this.length = 0;
        this._deleted = 0;
        this._hashTable = [];
        for (const slot of oldSlots) {
            if (slot !== undefined && !slot.DELETED) {
                this.set(slot.key, slot.value);
            }
        }
    }
    static _hashString(string) {
        let hash = 5381;
        for (let i = 0; i < string.length; i++) {
            //Bitwise left shift with 5 0s - this would be similar to
            //hash*31, 31 being the decent prime number
            //but bit shifting is a faster way to do this
            //tradeoff is understandability
            hash = (hash << 5) + hash + string.charCodeAt(i);
            //converting hash to a 32 bit integer
            hash = hash & hash;
        }
        //making sure hash is unsigned - meaning non-negtive number.
        return hash >>> 0;
    }
}
function main() {
    HashMap.MAX_LOAD_RATIO = 0.5;
    HashMap.SIZE_RATIO = 3;
    const lotr = new HashMap();
    lotr.set("Hobbit", "Bilbo");
    lotr.set("Hobbit", "Frodo");
    lotr.set("Wizard", "Gandalf");
    lotr.set("Human", "Aragorn");
    lotr.set("Elf", "Legolas");
    lotr.set("Maiar", "The Necromancer");
    lotr.set("Maiar", "Sauron");
    lotr.set("RingBearer", "Gollum");
    lotr.set("LadyOfLight", "Galadriel");
    lotr.set("HalfElven", "Arwen");
    lotr.set("Ent", "Treebeard")
    console.log(lotr.get("Hobbit"))
    console.log(lotr.get("Maiar"))
}
// console.log(main())
// 20 and 10. The second key overrides the first
const WhatDoesThisDo = function(){
    let str1 = 'Hello World.';
    let str2 = 'Hello World.';
    let map1 = new HashMap();
    map1.set(str1,10);
    map1.set(str2,20);
    let map2 = new HashMap();
    let str3 = str1;
    let str4 = str2;
    map2.set(str3,20);
    map2.set(str4,10);
    console.log(map1.get(str1));
    console.log(map2.get(str3));
}
// WhatDoesThisDo()
function deleteRepeat(str) {
    HashMap.SIZE_RATIO = 3;
    HashMap.MAX_LOAD_RATIO = 0.8;
    str = str.toLowerCase()
    const map1 = new HashMap()
    let final = ''
    for (let i = 0; i < str.length; i++) {
        // if (!final.includes(str.charAt(i))) {
        //     final = final + str.charAt(i)
        // }
        try {
            let char = map1.get(str.charAt(i))
        }
        catch {
            map1.set(str.charAt(i), str.charAt(i))
            final = final + str.charAt(i)
        }
    }
    return final
}
// console.log(deleteRepeat('google all that you think can think of'))
const query = new HashMap();
function isPalindrome(str) {
    HashMap.SIZE_RATIO = 3;
    HashMap.MAX_LOAD_RATIO = 0.8;
    str = str.toLowerCase();
    for (let i = 0; i < str.length; i++) {
        try {
            let count = query.get(str.charAt(i))
            count++
            query.set(str.charAt(i), count)
        }
        catch {
            query.set(str.charAt(i), 1)
        }
    }
    if (str.length % 2 === 0) {
        let palindrome = true
        for (let i = 0; i < str.length; i++) {
            if (query.get(str.charAt(i)) !== 2) {
                palindrome = false
            }
        }
        return palindrome;
    }
    if (str.length % 2 === 1) {
        let oneLetters = 0
        for (let i = 0; i < str.length; i++) {
            if (query.get(str.charAt(i)) === 1) {
                oneLetters = oneLetters + 1
            }
        }
        if (oneLetters > 1) {
            return false
        }
        return true
    }
}
// console.log(isPalindrome('aaccrrdd'))
// console.log(isPalindrome('aaccrddqq'))
