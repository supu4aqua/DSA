class BinarySearchTree {
    constructor(key = null, value = null, parent = null) {
        this.key = key,
        this.value = value,
        this.parent = parent,
        this.left = null,
        this.right = null
    }

    insert(key, value) {
        if (this.key === null) {
            this.key = key;
            this.value = value;
        }

        else if (key < this.key) {
            if (this.left === null) {
                this.left = new BinarySearchTree(key, value, this)
            } else {
                this.left.insert(key, value)
            }
        }

        else {
            if (this.right === null) {
                this.right = new BinarySearchTree(key, value, this);
            } else {
                this.right.insert(key, value)
            }
        }
    }

    find(key) {
        if (this.key == key) {
            return this.value;
        }

        else if (key < this.key && this.left) {
            return this.left.find(key)
        }

        else if (key > this.key && this.right) {
            return this.right.find(key)
        }

        else {
            throw new Error('Key error')
        }
    }

    remove(key) {
        if (this.key == key) {
            if (this.left && this.right) {
                const successor = this.right._findMin();
                this.key = successor.key;
                this.value = success.value;
                successor.remove(successor.key)
            }

            else if (this.left) {
                this._replaceWith(this.left)
            }

            else if (this.right) {
                this._replaceWith(this.right)
            }

            else {
                this._replaceWith(null)
            }
        }

        else if (key < this.key && this.left) {
            this.left.remove(key)
        }
        else if (key > this.key && this.right) {
            this.right.remove(key)
        }
        else {
            throw new Error('Key error')
        }
    }

    _replaceWith(node) {
        if (this.parent) {
            if (this == this.parent.left) {
                this.parent.left = node;
            }
            else if (this == this.parent.right) {
                this.parent.right = node
            }

            if (node) {
                node.parent = this.parent
            }
        }
        else {
            if (node) {
                this.key = node.key,
                this.value = node.value,
                this.left = node.left,
                this.right = node.right
            }
            else {
                this.key = null,
                this.value = null,
                this.left = null,
                this.right = null
            }
        }
    }

    _findMin() {
        if (!this.left) {
            return this
        }
        return this.left._findMin()
    }
}

const tree = new BinarySearchTree();
const data = [25, 15, 50, 10, 24, 35, 70, 4, 12, 18, 31, 44, 66, 90, 22];

data.forEach(num => {
    tree.insert(num)
})

// console.log(tree)

function inOrder(tree, values = []) {
    if (tree.left) {
        values = inOrder(tree.left, values);
    }
    values.push(tree.key);

    if (tree.right) {
        values = inOrder(tree.right, values);
    }
    return values;
}

// console.log(inOrder(tree))

function preOrder(tree, values = []) {
    values.push(tree.key);
    if (tree.left) {
        values = preOrder(tree.left, values);
    }

    if (tree.right) {
        values = preOrder(tree.right, values);
    }
    return values;
}

// console.log(preOrder(tree))

function postOrder(tree, values = []) {

    if (tree.left) {
        values = postOrder(tree.left, values);
    }

    if (tree.right) {
        values = postOrder(tree.right, values);
    }
    values.push(tree.key);
    return values;
}

// console.log(postOrder(tree))

const USSE = new BinarySearchTree();
USSE.insert(10, 'Picard');
USSE.insert(5, 'Riker');
USSE.insert(15, 'Data');
USSE.insert(4, 'Worf');
USSE.insert(6, 'LaForge');
USSE.insert(3, 'Security-officer');
USSE.insert(17, 'Crusher');
USSE.insert(16, 'Selar');


class _Node2 {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class Queue {
    constructor() {
        this.first = null;
        this.next = null;
    }

    enqueue(data) {
        const node = new _Node2(data);

        if (this.first === null) {
            this.first = node
        }

        if (this.last) {
            this.last.next = node;
        }

        this.last = node
    }


    dequeue() {
        if (this.first === null) {
            return;
        }

        const node = this.first;
        this.first = this.first.next;

        if (node === this.last) {
            this.last = null;
        }

        return node.value
    }
}


function rankOrder(tree, values = []) {
    const queue = new Queue();
    const node = tree;
    queue.enqueue(node);

    while (queue.length) {
        node = queue.dequeue()
        values.push(node.value);

        if (node.left) {
            queue.enqueue(node.left)
        }

        if (node.right) {
            queue.enqueue(node.right)
        }
    }

    return values

}

console.log(rankOrder(USSE))


function maxProfit(data) {
    let max = 0
    for (let i = 0; i < data.length - 1; i++) {
        let checkMax = data[i] - data[i + 1];
        if (checkMax < max) {
            max = checkMax
        }
    }
    return Math.abs(max)
}
