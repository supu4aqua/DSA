1. Understanding the merge sort
a) [21, 1]
b) [26, 45]
c) [21] and [1]
d) [21, 1, 26, 45] and [29, 28, 2, 9]

2. Understanding the quick sort
a) The pivot could have been either 14 or 17
b)

3. Implementing Quick Sort
class QuickSort {
    //Partition the array using pivot
    int partition( int arr[], int low, int high){
      int pivot = arr[high];
      int i = low-1;
      for(int j=low; j < high; j++){
        if(arr[j] < pivot){
            i++;
            int temp = arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
        }
      }
      int temp = arr[i+1];
      arr[i+1]=arr[high];
      arr[high]=temp;
      return i+1;
    }
    //Recursively Sort
    void sort(int arr[], int low, int high){
      if(low < high){
        int pi = partition(arr, low, high);
        //Recursively sort the two partitions. Partition around pivot
        sort(arr, low, pi-1);
        sort(arr, pi+1, high);
      }

    }
    static void printArray(int arr[]){
      int n =arr.length;
      for(int i=0;i<n;i++){
        System.out.println(arr[i]+ " ");
        System.out.println();
      }
    }
    //Main function that calls the partiton and sort
   public static void main(String[] args) {
     int arr[] = {89,30, 25, 32, 72, 70, 51, 42, 25, 24, 53, 55, 78, 50, 13, 40, 48, 32, 26, 2, 14, 33, 45, 72, 56, 44, 21, 88, 27, 68, 15, 62, 93, 98, 73, 28, 16, 46, 87, 28, 65, 38, 67, 16, 85, 63, 23, 69, 64, 91, 9, 70, 81, 27, 97, 82, 6, 88, 3, 7, 46, 13, 11, 64, 76, 31, 26, 38, 28, 13, 17, 69, 90, 1, 6, 7, 64, 43, 9, 73, 80, 98, 46, 27, 22, 87, 49, 83, 6, 39, 42, 51, 54, 84, 34, 53, 78, 40, 14, 5};
     int n = arr.length;
     QuickSort ob = new QuickSort();
     ob.sort(arr,0, n-1);
System.out.println("Sorted Array");
printArray(arr);
   }

}


4. Implementing Merge Sort
class MergeSort{

  void merge(int arr[], int l, int m, int r){
    //Find size of arrays to be merged
    int n1 = m - l + 1;
    int n2 = r - m;
    //Create temp arrays
    int L[] = new int [n1];
    int R[] = new int [n2];
    //Copy data to temp arrays
    for (int i=0; i<n1; ++i)
      L[i]=arr[l+i];
    for(int j=0;j<n2;++j){
      R[j]=arr[m+1+j];
    }

    //Initialize first index of both subArrays
    int i=0;
    int j=0;
    //Intial index of merged arrays
    int k =l;
    while(i<n1 && j<n2){
      if(L[i]<=R[j]){
        arr[k]=L[i];
        i++;
      }
      else {
        arr[k]=R[j];
        j++;
      }
      k++;
    }
    while (i < n1)
    {
      arr[k] = L[i];
      i++;
      k++;
    }

   //Copy remaining elements of R[] if any
    while (j < n2)
    {
      arr[k] = R[j];
      j++;
      k++;
    }

  }

  void sort(int arr[], int l, int r){
    if(l<r){
      int m = (l+r)/2;
      sort(arr, l, m);
      sort(arr, m+1, r);
      merge(arr, l, m,r);
    }
  }

static void printArray(int arr[]){
    int n =arr.length;
    for(int i=0;i<n;i++){
      System.out.println(arr[i] + " ");
    }
  }

  public static void main(String[] args){
    int arr[] = {89,30, 25, 32, 72, 70, 51, 42, 25, 24, 53, 55, 78, 50, 13, 40, 48, 32, 26, 2, 14, 33, 45, 72, 56, 44, 21, 88, 27, 68, 15, 62, 93, 98, 73, 28, 16, 46, 87, 28, 65, 38, 67, 16, 85, 63, 23, 69, 64, 91, 9, 70, 81, 27, 97, 82, 6, 88, 3, 7, 46, 13, 11, 64, 76, 31, 26, 38, 28, 13, 17, 69, 90, 1, 6, 7, 64, 43, 9, 73, 80, 98, 46, 27, 22, 87, 49, 83, 6, 39, 42, 51, 54, 84, 34, 53, 78, 40, 14, 5};
    int n = arr.length;

    MergeSort ob = new MergeSort();
    ob.sort(arr, 0, n-1);
    printArray(arr);
  }
}
