class _Node {
    constructor(value, next) {
        this.value = value;
        this.next = next;
    }
}

class LinkedList {
    constructor() {
        this.head = null;
    }

    insertFirst(item) {
        this.head = new _Node(item, this.head)
    }

    insertLast(item) {
        if (this.head === null) {
            this.insertFirst(item)
        }
        else {
            let tempNode = this.head;
            while (tempNode.next !== null) {
                tempNode = tempNode.next;
            }
            tempNode.next = new _Node(item, null)
        }
    }

    insertBefore(item, value) {
        if (!this.head) {
            return null
        }

        let currNode = this.head;
        let prevNode = this.head;

        while ((currNode !== null) && (currNode.value !== value)) {

            prevNode = currNode;
            currNode = currNode.next;
        }

        if (currNode === null) {
            return "Item not found"
        }

        prevNode.next = new _Node(item, currNode)
    }

    insertAfter(item, value) {
        if (!this.head) {
            return null
        }

        let currNode = this.head;
        let nextNode = this.head.next;

        while ((currNode !== null) && (currNode.value !== value)) {
            currNode = currNode.next;
            nextNode = currNode.next;
        }

        if (currNode === null) {
            return "Item not found"
        }

        currNode.next = new _Node(item, nextNode)
    }

    insertAt(item, pos) {
        if (!this.head) {
            return null
        }

        let prevNode = this.head;
        let currNode = this.head;
        let position = 1;

        while ((currNode !== null) && (position !== pos)) {
            prevNode = currNode;
            currNode = currNode.next;
            position++
        }

        if (currNode === null) {
            return 'Position exceeds linked-list length'
        }

        prevNode.next = new _Node(item, currNode)
    }

    find(item) {
        let currNode = this.head;

        if (!this.head) {
            return null
        }

        while(currNode !== item) {
            if (currNode === null) {
                return null;
            }
            else {
                currNode = currNode.next;
            }
        }

        return currNode;
    }

    remove(item) {
        if (!this.head) {
            return null
        }

        if (this.head.value === item) {
            this.head = this.head.next;
            return;
        }

        let currNode = this.head;
        let prevNode = this.head;

        while ((currNode !== null) && (currNode.value !== item)) {

            prevNode = currNode;
            currNode = currNode.next;
        }

        if (currNode === null) {
            return "Item not found"
        }

        prevNode.next = currNode.next;
    }
}

function main() {
    let SLL = new LinkedList;

    SLL.insertFirst('Apollo');
    SLL.insertLast('Boomer');
    SLL.insertLast('Helo');
    SLL.insertLast('Husker');
    SLL.insertLast('Starbuck');

    SLL.insertFirst('Tauhida');

    SLL.remove('Husker');

    SLL.insertBefore('Athena', 'Boomer')

    SLL.insertAfter('Hotdog', 'Helo')

    SLL.insertAt('Kat', 3)

    SLL.remove('Tauhida')

    return SLL
}

// console.log(require('util').inspect(main(), {depth: null}))

const LL = main()
const LS = {}

function display(LL) {
    if (!LL.head) {
        return 'List Empty'
    }

    let dis = [];
    let currNode = LL.head;

    while ((currNode !== null)) {
        dis.push(currNode)
        currNode = currNode.next
    }

    return dis
 }

//  console.log(display(LL))


function size(LL) {
    let size = 0;

    if (!LL.head) {
        return size
    }

    let currNode = LL.head;

    while (currNode !== null) {
        currNode = currNode.next;
        size++
    }

    return size
}

// console.log(size(LL))


function isEmpty(LL) {
    if (LL.head) {
        return false
    }
    return true
}

// console.log(isEmpty(LL))


function findPrevious(LL, item) {
    if (!LL.head) {
        return 'List Empty'
    }

    let prevNode = LL.head;
    let currNode = LL.head;

    while ((currNode !== null) && (currNode.value !== item)) {
        prevNode = currNode.value;
        currNode = currNode.next;
    }

    if (currNode === null) {
        return 'Item not found'
    }

    return prevNode
}

// console.log(findPrevious(LL, 'Boomer'))


function findLast(LL) {

    if (!LL.head) {
        return size
    }

    let prevNode = LL.head
    let currNode = LL.head;

    while (currNode !== null) {
        prevNode = currNode
        currNode = currNode.next;
    }

    return prevNode
}

// console.log(findLast(LL))


// Mystery Program
// it is getting rid of duplicates in the linked list


function remove(LL, item) {
    if (!LL.head) {
        return null
    }

    if (LL.head.value === item) {
        LL.head = LL.head.next;
        return;
    }

    let currNode = LL.head;
    let prevNode = LL.head;

    while ((currNode !== null) && (currNode.value !== item)) {

        prevNode = currNode;
        currNode = currNode.next;
    }

    if (currNode === null) {
        return "Item not found"
    }

    prevNode.next = currNode.next;
    return LL
}

function reverse(LL) {
    if (!LL.head) {
        return 'List empty'
    }

    let firstNode = LL.head;

    let lastNode = findLast(LL)

    if (lastNode === firstNode) {
        return lastNode
    }

    let newLst = remove(LL, lastNode.value)

    lastNode.next = reverse(newLst)

    return lastNode
}

// console.log(reverse(LL))


function middleList(LL) {
    if (!LL.head) {
        return 'List empty'
    }

    let lst = LL
    let sz = size(lst)
    let last = findLast(lst)

    // console.log(require('util').inspect(lst, {depth: null}))

    if (sz > 2) {
        lst = remove(LL, LL.head.value);
        lst = remove(LL, last.value);


        middleList(LL)
    }

    return lst
}

// console.log(middleList(LL))

const CycleList = new LinkedList();
CycleList.insertFirst('Love')
CycleList.insertLast('Faith')
CycleList.insertLast('Hope')
let last = findLast(CycleList)
last.next = CycleList.head
// CycleList.insertLast('Freedom')

// console.log(require('util').inspect(CycleList, {depth: null}))


function cycleList(LL) {
    if (!LL.head) {
        return 'List empty'
    }

    let currNode = LL.head;
    let nodes = []

    while (!(nodes.includes(currNode.value))) {
        nodes.push(currNode.value)
        currNode = currNode.next;

        if (currNode.next === null) {
            return false
        }
    }

    return true
}

// console.log(cycleList(CycleList))

const Unsorted = new LinkedList();

Unsorted.insertFirst(9);
Unsorted.insertLast(3);
Unsorted.insertLast(1);
Unsorted.insertLast(7);
Unsorted.insertLast(4);


function find(LL, item) {
    let currNode = LL.head;

    if (!LL.head) {
        return null
    }

    while(currNode !== item) {
        if (currNode === null) {
            return null;
        }
        else {
            currNode = currNode.next;
        }
    }

    return currNode;
